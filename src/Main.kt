import java.io.*
import java.lang.Integer.parseInt
import kotlin.math.roundToInt

fun IntArray.toDoubleArray(): DoubleArray {
    val conversion = DoubleArray(size)
    for (i in indices)
        conversion[i] = elementAt(i).toDouble()

    return conversion
}

fun readAllMatrices(path: String): ArrayList<Matrix> {
    val matList = ArrayList<Matrix>()

    File(path).bufferedReader().use {
        val total = parseInt(it.readLine())

        for (i in 0..<total) {
            var line = it.readLine()
            val sizes = line.split(" ")
            val rows = parseInt(sizes[0])
            val columns = parseInt(sizes[1])

            val mat = Matrix(rows, columns)
            for (j in 1..rows) {
                line = it.readLine()
                val entries = line.split(" ")

                for (k in 1..columns)
                    mat.setEntryAt(j, k, parseInt(entries[k-1]).toDouble())
            }

            matList.add(mat)
        }

        it.close()
    }

    return matList
}

fun saveAllMatrices(path: String, matrices: List<Matrix>) {
    PrintWriter(File(path)).use {
        it.println(matrices.size)

        for (mat in matrices) {
            it.println("${mat.rows} ${mat.columns}")

            for (j in 1..mat.rows) {
                for (k in 1..mat.columns) {
                    it.print(mat.getEntryAt(j, k).roundToInt())

                    if (k == mat.columns) it.println() else it.print(' ')
                }
            }
        }

        it.flush()
        it.close()
    }
}

fun main() {
    // ChatGPT-generated 10x12 matrix.
    val matLarge = Matrix(arrayOf(
            intArrayOf(51, 92, 14, 71, 60, 20, 82, 86, 74, 74, 87, 99).toDoubleArray(),
            intArrayOf(102, 184, 28, 142, 120, 40, 164, 172, 148, 148, 174, 198).toDoubleArray(),
            intArrayOf(51, 92, 14, 71, 60, 20, 82, 86, 74, 74, 87, 99).toDoubleArray(),
            intArrayOf(14, 61, 61, 46, 61, 50, 54, 63, 2, 100, 50, 6).toDoubleArray(),
            intArrayOf(20, 72, 38, 17, 3, 88, 59, 13, 8, 89, 52, 1).toDoubleArray(),
            intArrayOf(83, 91, 59, 70, 43, 7, 46, 34, 77, 80, 35, 49).toDoubleArray(),
            intArrayOf(3, 1, 5, 53, 3, 53, 92, 62, 17, 89, 43, 33).toDoubleArray(),
            intArrayOf(73, 61, 99, 13, 94, 47, 14, 71, 77, 86, 61, 39).toDoubleArray(),
            intArrayOf(84, 79, 81, 52, 23, 25, 88, 59, 40, 28, 14, 44).toDoubleArray(),
            intArrayOf(64, 88, 70, 8, 87, 0, 7, 87, 62, 10, 80, 7).toDoubleArray()
    ))

    println("Rank: ${matLarge.rank()}")
    println("Nullity: ${matLarge.nullity()}")

    val rowVector = createVectorInstance(horizontal = true, 1.0, 2.0, 3.0)
    val columnVector = createVectorInstance(horizontal = false, 5.0, 4.0, 3.0, 2.0, 1.0)
    val anotherRowVector = createVectorInstance(horizontal = true, *intArrayOf(1, 2, 3).toDoubleArray())
    val anotherColumnVector = createVectorInstance(horizontal = false, *intArrayOf(5, 4, 3, 2, 1).toDoubleArray())

    println(rowVector)
    println(anotherRowVector)
    println(columnVector)
    println(anotherColumnVector)

    // the matrices stored in the file are generated by ChatGPT. (96 randomly generated integer matrices)
    val matrices = readAllMatrices("random_matrices.txt")

    for (i in matrices.indices)
        matrices[i] = matrices[i].rowEchelon()

    saveAllMatrices("results.txt", matrices)
}